type Query {
    agents(id: UUID): [Agent!]

    contestable(id: UUID!): Contestable
    markdownNode(id: UUID!): MarkdownNode
    link(id: UUID!): Link
    links(id: UUID!): Links

    attitude(id: UUID!): Attitude
}

type Mutation {
    addAgent(displayName: String): Agent
    updateAgent(id: UUID!, displayName: String!): Agent

    addMarkdownNode(text: String!): MarkdownNode!
    updateMarkdownNode(id: UUID!, text: String!): MarkdownNode

    addLink(from: UUID!, to: UUID!): Link
    removeLink(id: UUID!): Result

    setAttitudeHistogram(on: UUID!, histogram: HistogramInput!): Attitude
}

type Subscription {
    agentUpdates: Agent!
}

enum Result {
    Success
    Failure
}

type Agent {
    userName: String
}

type Attitude {
    agent: Agent!
    contestableId: UUID!
    histogram: Histogram
}

type Bucket {
#    center: Float!
    value: Float!
}

type Histogram {
    buckets: [Bucket!]!
    #    bucketSize: Float
}

input BucketInput {
#    center: Float!
    value: Float!
}

input HistogramInput {
    buckets: [BucketInput!]!
}

interface Contestable {
    id: UUID!
    sourceLinks: [Link!]
    targetLinks: [Link!]
    owner: Agent
}

interface Node implements Contestable {
    id: UUID!
    sourceLinks: [Link!]!
    targetLinks: [Link!]!
    owner: Agent
}

type MarkdownNode implements Contestable & Node {
    id: UUID!
    text: String!
    sourceLinks: [Link!]!
    targetLinks: [Link!]!
    owner: Agent
}

type Link implements Contestable {
    id: UUID!
    sourceRef: UUID!
    targetRef: UUID!
    sourceLinks: [Link!]!
    targetLinks: [Link!]!
    owner: Agent
}

type Links {
    sourceRefs: [Link!]!
    targetRefs: [Link!]!
}

type Belief {
    id: UUID!
}

scalar UUID
#scalar DateTime