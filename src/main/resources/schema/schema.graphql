type Query {
    agents(id: UUID): [Agent!]

    contestable(id: UUID!): Contestable
    markdownNode(id: UUID!): MarkdownNode
    link(id: UUID!): Link
    links(id: UUID!): Links
}

type Mutation {
    addAgent(displayName: String): Agent
    updateAgent(id: UUID!, displayName: String!): Agent

    addMarkdownNode(text: String!): MarkdownNode!
    updateMarkdownNode(id: UUID!, text: String!): MarkdownNode

    addLink(from: UUID!, to: UUID!): Link
    removeLink(id: UUID!): Result
}

type Subscription {
    agentUpdates: Agent!
}

enum Result {
    Success
    Failure
}

type Agent {
    id: UUID!
    displayName: String
}

interface Contestable {
    id: UUID!
    sourceLinks: [Link!]
    targetLinks: [Link!]
}

interface Node implements Contestable {
    id: UUID!
    sourceLinks: [Link!]!
    targetLinks: [Link!]!
}

type MarkdownNode implements Contestable & Node {
    id: UUID!
    text: String!
    sourceLinks: [Link!]!
    targetLinks: [Link!]!
}

type Link implements Contestable {
    id: UUID!
    sourceRef: UUID!
    targetRef: UUID!
    sourceLinks: [Link!]!
    targetLinks: [Link!]!
}

type Links {
    sourceRefs: [Link!]!
    targetRefs: [Link!]!
}

type Belief {
    id: UUID!
}

scalar UUID
#scalar DateTime